{"version":3,"sources":["Components/renderList.js","Components/addTask.js","Components/header.js","Components/App.js","serviceWorker.js","index.js"],"names":["ShowList","props","state","listArray","className","this","data","length","id","map","task","key","onClick","removeToDo","React","Component","AddTask","get_data","currentData","activity","what","handleChange","bind","handleSubmit","handleRemove","event","localStore","setState","preventDefault","target","value","index","removeUpdate","d","filter","element","htmlFor","type","name","onChange","Cabeca","tasks","JSON","parse","localStorage","getItem","storeTask","saveToStorage","saveFromRemove","newTask","oldArray","push","newArray","listToRender","c","stringify","setItem","x","console","log","update_local","b","saveStore","transfer_data","atualizar","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.dc6a3299.chunk.js","sourcesContent":["import React from \"react\";\n\nimport \"./styles/header_style.css\"\n\n// component that renders the list\nclass ShowList extends React.Component{\n\n\nconstructor(props){\n    super(props);\n\n    this.state = {\n        listArray:[],\n     \n    }\n\n}\n\n\nrender(){\n    \n     //it receives the list of tasks through props\n    return(\n            <div className=\"renderList\">\n                \n                <h2>You currently have {this.props.data.length} tasks</h2>   \n                <div id=\"fill_gap\" >\n                <ul>\n        {this.props.data.map(task => \n            \n         <li key={task}>{task} <button className=\"removeTask\" key={task} onClick={() => this.props.removeToDo(task)}>Remove</button> \n         \n        </li>\n      )\n      \n        }\n\n                </ul>  \n                </div>\n                 \n            </div>\n        )\n    }\n}\n\nexport default ShowList; ","import React from \"react\"\n\nimport ShowList from \"./renderList\"\n\nimport \"./styles/header_style.css\"\nclass AddTask extends React.Component{\n\n    constructor(props){\n        super(props);\n       \n\n        let  get_data =  this.props.currentData; \n\n        this.state = {\n           \n            activity : get_data,\n            what: \" \",\n           \n        }\n\n       \n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.handleRemove = this.handleRemove.bind(this);\n\n        \n\n    }\n\n\n\n    //it adds the new task inputed by the user\n    handleSubmit(event) {\n       \n        \n        this.props.localStore(this.state.what);\n\n      \n        //erase input field so it can get new input\n        this.setState({what:\" \"})\n\n        \n        event.preventDefault();\n\n      }\n\n   handleChange(event){\n      this.setState({what:event.target.value})\n     \n  }\n\n  handleRemove(index){\n\n    //check if it is the item intended to be removed is the last item of the list. If it is the case, update state to new array\n    if(this.state.activity.length === 1 && this.state.activity[0] === index){\n        this.setState({activity: []}, () =>{\n        \n        this.props.removeUpdate(this.state.activity);\n      });\n    }\n\n    //regular remove of any task, but the last one\n    else{\n       \n    let d = this.state.activity.filter(element => element !== index); \n   \n    this.setState({activity:d}, ()=>{\n     \n     this.props.removeUpdate(this.state.activity)});\n \n\n  }\n}\n\n    render(){\n\n        \n\n        return(\n            <div className=\"getForm\">\n            \n\n            <label htmlFor=\"newTask\" > Add a new Task </label>\n\n            <input  className=\"input_field\" type='text'  name=\"newTask\" value={this.state.what} onChange={this.handleChange}></input>\n           \n            <input className=\"input_button\" type=\"submit\" value=\"Submit\" onClick= {this.handleSubmit}></input>\n            \n\n            <ShowList data= {this.state.activity} removeToDo = {this.handleRemove}/>\n           \n            \n         \n           \n            </div> \n        )   \n    }\n}\n\nexport default AddTask;","import React from \"react\";\n\nimport AddTask from \"./addTask\"\n\nimport ShowList from \"./renderList\";\n\nimport \"./styles/header_style.css\"\n\n\n//main component \n\nclass Cabeca extends React.Component{\n\n    constructor(props){\n        super(props);\n        //get data from local storage. If none, it creates a new array\n        this.state = {\n            \n            tasks : JSON.parse(localStorage.getItem(\"save_list\"))||[]\n            \n           \n        }\n\n\n        this.storeTask = this.storeTask.bind(this);\n        this.saveToStorage = this.saveToStorage.bind(this);\n        this.saveFromRemove = this.saveFromRemove.bind(this);\n        \n\n        \n    \n    }\n\n    storeTask(newTask){\n        \n        let oldArray = this.state.tasks;\n       \n        oldArray.push(newTask);\n\n        let newArray = oldArray;\n\n        this.setState({tasks: newArray}, () => {\n    \n        this.saveToStorage();\n        });\n\n\n     \n\n        return (\n            <ShowList listToRender={this.state.tasks}/>\n    )\n        \n    }\n\n    //it saves the list of to dos into the local storage.\n    saveToStorage(){\n       \n        \n        try{\n        \n        let c = JSON.stringify(this.state.tasks);\n        localStorage.setItem('save_list', c); \n        }\n        catch(x){\n            console.log(x);\n        }\n        \n     \n\n    }\n\n    saveFromRemove(update_local){\n        //store array in string version into a variable\n        let b = JSON.stringify(update_local);\n        //send it to local storage\n        localStorage.setItem('save_list', b); \n        \n        this.setState({tasks:update_local})\n       \n\n    }\n\n\n\n    render(){\n        return(\n    <div className=\"header\">\n        <h1 className=\"main_title\">Raniery's TO DO LIST</h1>\n\n        <br/>\n\n        <h2>Welcome to your list! </h2>\n\n        <br/>\n        \n        <h2> Here you can see the tasks you have to do and add new things too. Enjoy! üìù</h2>\n        \n        <AddTask  currentData = {this.state.tasks} localStore={this.storeTask} saveStore ={this.saveToStorage} removeUpdate={this.saveFromRemove}\n        \n        transfer_data = {this.atualizar}/>\n        \n\n      \n\n\n    </div>\n        )}\n}\n\nexport default Cabeca; ","import React from 'react';\n\nimport './App.css';\n\nimport Cabeca from \"./header\"\n\nimport ShowList from './renderList';\n\nfunction App() {\n  \n  return(\n    <div>\n   \n    <Cabeca />\n    \n    </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n \n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}